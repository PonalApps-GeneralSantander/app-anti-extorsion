This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
app/
  _layout.tsx
  alertas.tsx
  grabacion.tsx
  index.tsx
  recursos.tsx
  reportar.tsx
components/
  AppButton.tsx
  EmergencyContactCard.tsx
  PoliceHeader.tsx
  SuspiciousCallCard.tsx
constants/
  Colors.ts
scripts/
  reset-project.js
.gitignore
app.json
eas.json
package.json
README.md
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="app/index.tsx">
import React from "react";
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  Image,
  TouchableOpacity,
  ImageBackground,
  Alert,
} from "react-native";
import { SafeAreaView } from "react-native-safe-area-context";
import { FontAwesome5 } from "@expo/vector-icons";
import { Link } from "expo-router";

import { Colors } from "../constants/Colors";
import EmergencyContactCard from "../components/EmergencyContactCard";

export default function HomeScreen() {
  const handleEmergencyPress = () => {
    Alert.alert(
      "Llamada de Emergencia",
      "¿Desea realizar una llamada de emergencia al 123?",
      [
        {
          text: "Cancelar",
          style: "cancel",
        },
        {
          text: "Llamar",
          onPress: () => {
            // Logic to make the call would go here
          },
        },
      ]
    );
  };

  return (
    <View style={styles.container}>
      <View style={{ height: 170 }}>
        <View style={styles.headerOverlay}>
          <View style={styles.logoContainer}>
            <Image
              source={require("../assets/images/policia-logo.png")}
              style={styles.logo}
              resizeMode="contain"
            />
          </View>
          <Text style={styles.headerTitle}>Aplicación SaveLife</Text>
          <Text style={styles.headerSubtitle}>
            App - SaveLife
          </Text>
        </View>

        {/* Colombian flag stripe */}
        <View style={styles.flagStripe}>
          <View
            style={[styles.flagColor, { backgroundColor: Colors.flagYellow }]}
          />
          <View
            style={[styles.flagColor, { backgroundColor: Colors.flagBlue }]}
          />
          <View
            style={[styles.flagColor, { backgroundColor: Colors.flagRed }]}
          />
        </View>
      </View>

      <ScrollView style={styles.contentContainer}>
        {/* Emergency Button */}
        <TouchableOpacity
          style={styles.emergencyButton}
          onPress={handleEmergencyPress}
          activeOpacity={0.8}
        >
          <FontAwesome5
            name="exclamation-circle"
            size={24}
            color={Colors.light}
          />
          <Text style={styles.emergencyButtonText}>Emergencia</Text>
        </TouchableOpacity>

        {/* Quick Access Cards */}
        <View style={styles.quickAccessContainer}>
          <Text style={styles.sectionTitle}>Acceso Rápido</Text>
          <View style={styles.cardRow}>
            <Link href="/reportar" asChild>
              <TouchableOpacity style={styles.quickCard} activeOpacity={0.7}>
                <View
                  style={[
                    styles.cardIconContainer,
                    { backgroundColor: Colors.danger },
                  ]}
                >
                  <FontAwesome5
                    name="exclamation-triangle"
                    size={20}
                    color={Colors.light}
                  />
                </View>
                <Text style={styles.cardTitle}>Reportar</Text>
                <Text style={styles.cardSubtitle}>Incidentes</Text>
              </TouchableOpacity>
            </Link>

            <Link href="/alertas" asChild>
              <TouchableOpacity style={styles.quickCard} activeOpacity={0.7}>
                <View
                  style={[
                    styles.cardIconContainer,
                    { backgroundColor: Colors.warning },
                  ]}
                >
                  <FontAwesome5 name="bell" size={20} color={Colors.light} />
                </View>
                <Text style={styles.cardTitle}>Alertas</Text>
                <Text style={styles.cardSubtitle}>Recientes</Text>
              </TouchableOpacity>
            </Link>

            <Link href="/grabacion" asChild>
              <TouchableOpacity style={styles.quickCard} activeOpacity={0.7}>
                <View
                  style={[
                    styles.cardIconContainer,
                    { backgroundColor: Colors.info },
                  ]}
                >
                  <FontAwesome5
                    name="microphone"
                    size={20}
                    color={Colors.light}
                  />
                </View>
                <Text style={styles.cardTitle}>Grabar</Text>
                <Text style={styles.cardSubtitle}>Llamadas</Text>
              </TouchableOpacity>
            </Link>
          </View>
        </View>

        {/* Emergency Contacts */}
        <View style={styles.contactsContainer}>
          <Text style={styles.sectionTitle}>Contactos de Emergencia</Text>

          <EmergencyContactCard
            title="Línea de Emergencia"
            phoneNumber="123"
            description="Línea nacional de emergencias"
            icon="ambulance"
            isPrimary
          />

          <EmergencyContactCard
            title="CAI Caldas"
            phoneNumber="6014567890"
            description="Localidad Kennedy, Bogotá"
            icon="shield-alt"
          />

          <EmergencyContactCard
            title="GAULA SaveLife"
            phoneNumber="165"
            description="Grupo SaveLife y Secuestro"
            icon="user-shield"
          />
        </View>

        {/* Latest Alert */}
        <View style={styles.alertContainer}>
          <Text style={styles.sectionTitle}>Ultima Alerta</Text>
          <View style={styles.alertCard}>
            <View style={styles.alertHeader}>
              <FontAwesome5
                name="exclamation-triangle"
                size={18}
                color={Colors.danger}
              />
              <Text style={styles.alertTitle}>
                Nueva modalidad de extorsión
              </Text>
            </View>
            <Text style={styles.alertDate}>21 de Marzo, 2023</Text>
            <Text style={styles.alertDescription}>
              Se han reportado casos de individuos que se hacen pasar por
              funcionarios del Ministerio de Hacienda solicitando pagos por
              supuestas deudas tributarias.
            </Text>
            <TouchableOpacity style={styles.alertButton}>
              <Text style={styles.alertButtonText}>Ver Más</Text>
            </TouchableOpacity>
          </View>
        </View>
      </ScrollView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: Colors.backgroundLight,
  },
  headerBackground: {
    width: "100%",
    height: 180,
  },
  headerOverlay: {
    width: "100%",
    height: "100%",
    backgroundColor: "rgba(0, 69, 124, 0.85)", // Police blue with opacity
    paddingHorizontal: 20,
    paddingTop: 40,
    justifyContent: "center",
  },
  logoContainer: {
    width: 50,
    height: 50,
    backgroundColor: Colors.light,
    borderRadius: 25,
    justifyContent: "center",
    alignItems: "center",
    marginBottom: 12,
  },
  logo: {
    width: 40,
    height: 40,
  },
  headerTitle: {
    fontSize: 22,
    fontWeight: "bold",
    color: Colors.light,
    marginBottom: 4,
  },
  headerSubtitle: {
    fontSize: 16,
    color: Colors.light,
    opacity: 0.9,
  },
  flagStripe: {
    flexDirection: "row",
    height: 5,
  },
  flagColor: {
    flex: 1,
    height: "100%",
  },
  contentContainer: {
    flex: 1,
    padding: 16,
  },
  emergencyButton: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: Colors.danger,
    paddingVertical: 12,
    borderRadius: 8,
    marginVertical: 16,
    elevation: 3,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.3,
    shadowRadius: 3,
  },
  emergencyButtonText: {
    color: Colors.light,
    fontSize: 18,
    fontWeight: "bold",
    marginLeft: 10,
  },
  quickAccessContainer: {
    marginBottom: 24,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: "bold",
    color: Colors.primary,
    marginBottom: 12,
  },
  cardRow: {
    flexDirection: "row",
    justifyContent: "space-between",
  },
  quickCard: {
    backgroundColor: Colors.light,
    borderRadius: 8,
    padding: 16,
    flex: 1,
    marginHorizontal: 4,
    alignItems: "center",
    elevation: 2,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.2,
    shadowRadius: 2,
  },
  cardIconContainer: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: "center",
    alignItems: "center",
    marginBottom: 8,
  },
  cardTitle: {
    fontSize: 14,
    fontWeight: "bold",
    color: Colors.dark,
  },
  cardSubtitle: {
    fontSize: 12,
    color: Colors.textSecondary,
  },
  contactsContainer: {
    marginBottom: 24,
  },
  alertContainer: {
    marginBottom: 24,
  },
  alertCard: {
    backgroundColor: Colors.light,
    borderRadius: 8,
    padding: 16,
    elevation: 2,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.2,
    shadowRadius: 2,
  },
  alertHeader: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 8,
  },
  alertTitle: {
    fontSize: 16,
    fontWeight: "bold",
    color: Colors.dark,
    marginLeft: 8,
  },
  alertDate: {
    fontSize: 12,
    color: Colors.textSecondary,
    marginBottom: 8,
  },
  alertDescription: {
    fontSize: 14,
    color: Colors.textDark,
    lineHeight: 20,
    marginBottom: 12,
  },
  alertButton: {
    alignSelf: "flex-end",
    paddingVertical: 6,
    paddingHorizontal: 12,
    backgroundColor: Colors.primary,
    borderRadius: 4,
  },
  alertButtonText: {
    color: Colors.light,
    fontSize: 12,
    fontWeight: "bold",
  },
});
</file>

<file path="app/recursos.tsx">
import React, { useState } from 'react';
import { 
  View, 
  Text, 
  StyleSheet, 
  ScrollView,
  TouchableOpacity,
  Image,
  Linking
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { FontAwesome5 } from '@expo/vector-icons';

import { Colors } from '../constants/Colors';
import PoliceHeader from '../components/PoliceHeader';
import EmergencyContactCard from '../components/EmergencyContactCard';

interface PreventionTip {
  id: string;
  title: string;
  description: string;
  icon: string;
}

interface ResourceLink {
  id: string;
  title: string;
  url: string;
  description: string;
  icon: string;
}

const PREVENTION_TIPS: PreventionTip[] = [
  {
    id: '1',
    title: 'Verifique la identidad del llamante',
    description: 'Siempre verifique la identidad de quien llama. Si recibe una llamada de una entidad bancaria o estatal, cuelgue y llame al número oficial.',
    icon: 'user-check'
  },
  {
    id: '2',
    title: 'No proporcione información personal',
    description: 'Nunca comparta información personal, bancaria o códigos de verificación por teléfono a personas desconocidas.',
    icon: 'lock'
  },
  {
    id: '3',
    title: 'Reconozca señales de alarma',
    description: 'Desconfíe de llamadas que generan urgencia, miedo o presión para tomar decisiones inmediatas.',
    icon: 'exclamation-triangle'
  },
  {
    id: '4',
    title: 'Mantenga la calma',
    description: 'Ante una posible extorsión, mantenga la calma. No actúe impulsivamente y busque ayuda de las autoridades.',
    icon: 'heart'
  },
  {
    id: '5',
    title: 'Coordine con otros comerciantes',
    description: 'Mantenga comunicación con otros comerciantes de la zona para conocer sobre nuevos casos o modalidades de extorsión.',
    icon: 'store'
  }
];

const RESOURCE_LINKS: ResourceLink[] = [
  {
    id: '1',
    title: 'Policía Nacional',
    url: 'https://www.policia.gov.co/',
    description: 'Sitio oficial de la Policía Nacional de Colombia.',
    icon: 'shield-alt'
  },
  {
    id: '2',
    title: 'GAULA - Grupo SafeLife',
    url: 'https://www.policia.gov.co/especializados/gaula',
    description: 'Información sobre el Grupo SafeLife y Antisecuestro.',
    icon: 'user-shield'
  },
  {
    id: '3',
    title: 'Fiscalía General de la Nación',
    url: 'https://www.fiscalia.gov.co/',
    description: 'Denuncias y seguimiento de casos.',
    icon: 'balance-scale'
  },
  {
    id: '4',
    title: 'Prevención de Extorsión',
    url: 'https://www.mindefensa.gov.co/',
    description: 'Guías y material educativo sobre prevención de extorsión.',
    icon: 'book'
  }
];

export default function RecursosScreen() {
  const [expandedTip, setExpandedTip] = useState<string | null>(null);
  
  const toggleTip = (id: string) => {
    if (expandedTip === id) {
      setExpandedTip(null);
    } else {
      setExpandedTip(id);
    }
  };
  
  const handleOpenLink = (url: string) => {
    Linking.openURL(url);
  };

  return (
    <SafeAreaView style={styles.container} edges={['bottom']}>
      <PoliceHeader 
        title="Recursos e Información" 
        subtitle="Aprenda a prevenir la extorsión" 
      />
      
      <ScrollView style={styles.contentContainer}>
        {/* Hero Section */}
        <View style={styles.heroContainer}>
          <Image 
            source={require('../assets/images/prevention-banner.jpg')}
            style={styles.heroBanner}
            resizeMode="cover"
          />
          <View style={styles.heroOverlay}>
            <Text style={styles.heroTitle}>
              Juntos contra la extorsión
            </Text>
            <Text style={styles.heroSubtitle}>
              Recursos para la comunidad comercial de Kennedy
            </Text>
          </View>
        </View>
        
        {/* Prevention Tips */}
        <View style={styles.sectionContainer}>
          <Text style={styles.sectionTitle}>
            Consejos de Prevención
          </Text>
          
          {PREVENTION_TIPS.map(tip => (
            <TouchableOpacity 
              key={tip.id}
              style={styles.tipContainer}
              onPress={() => toggleTip(tip.id)}
              activeOpacity={0.8}
            >
              <View style={styles.tipHeader}>
                <View style={styles.tipIconContainer}>
                  <FontAwesome5 name={tip.icon} size={20} color={Colors.light} />
                </View>
                <Text style={styles.tipTitle}>{tip.title}</Text>
                <FontAwesome5 
                  name={expandedTip === tip.id ? 'chevron-up' : 'chevron-down'} 
                  size={16} 
                  color={Colors.primary} 
                />
              </View>
              
              {expandedTip === tip.id && (
                <Text style={styles.tipDescription}>
                  {tip.description}
                </Text>
              )}
            </TouchableOpacity>
          ))}
        </View>
        
        {/* Types of Extortion */}
        <View style={styles.sectionContainer}>
          <Text style={styles.sectionTitle}>
            Modalidades de Extorsión
          </Text>
          
          <View style={styles.extortionTypesContainer}>
            <View style={styles.extortionTypeCard}>
              <View style={styles.extortionIconContainer}>
                <FontAwesome5 name="phone" size={24} color={Colors.danger} />
              </View>
              <Text style={styles.extortionTypeTitle}>Extorsión Telefónica</Text>
              <Text style={styles.extortionTypeDescription}>
                Llamadas donde amenazan con daños a familiares o al negocio si no se realiza un pago.
              </Text>
            </View>
            
            <View style={styles.extortionTypeCard}>
              <View style={styles.extortionIconContainer}>
                <FontAwesome5 name="envelope" size={24} color={Colors.warning} />
              </View>
              <Text style={styles.extortionTypeTitle}>Extorsión por Mensajes</Text>
              <Text style={styles.extortionTypeDescription}>
                Mensajes de texto o WhatsApp con amenazas directas o suplantando identidades.
              </Text>
            </View>
            
            <View style={styles.extortionTypeCard}>
              <View style={styles.extortionIconContainer}>
                <FontAwesome5 name="store-alt" size={24} color={Colors.primary} />
              </View>
              <Text style={styles.extortionTypeTitle}>Extorsión Presencial</Text>
              <Text style={styles.extortionTypeDescription}>
                Visitas al negocio solicitando pagos por "seguridad" o "permiso" para operar.
              </Text>
            </View>
          </View>
        </View>
        
        {/* Useful Links */}
        <View style={styles.sectionContainer}>
          <Text style={styles.sectionTitle}>
            Enlaces Útiles
          </Text>
          
          {RESOURCE_LINKS.map(resource => (
            <TouchableOpacity 
              key={resource.id}
              style={styles.resourceLinkContainer}
              onPress={() => handleOpenLink(resource.url)}
              activeOpacity={0.7}
            >
              <View style={styles.resourceLinkIconContainer}>
                <FontAwesome5 name={resource.icon} size={20} color={Colors.primary} />
              </View>
              <View style={styles.resourceLinkContent}>
                <Text style={styles.resourceLinkTitle}>{resource.title}</Text>
                <Text style={styles.resourceLinkDescription}>{resource.description}</Text>
              </View>
              <FontAwesome5 name="external-link-alt" size={16} color={Colors.primary} />
            </TouchableOpacity>
          ))}
        </View>
        
        {/* Emergency Contacts */}
        <View style={styles.sectionContainer}>
          <Text style={styles.sectionTitle}>
            Contactos de Emergencia
          </Text>
          
          <EmergencyContactCard
            title="Línea de Emergencia"
            phoneNumber="123"
            description="Línea nacional de emergencias"
            icon="ambulance"
            isPrimary
          />
          
          <EmergencyContactCard
            title="GAULA SaveLife"
            phoneNumber="165"
            description="Grupo SaveLife y Secuestro"
            icon="user-shield"
          />
          
          <EmergencyContactCard
            title="CAI Caldas"
            phoneNumber="6014567890"
            description="Localidad Kennedy, Bogotá"
            icon="shield-alt"
          />
        </View>
        
        {/* Footer */}
        <View style={styles.footer}>
          <View style={styles.logoContainer}>
            <Image 
              source={require('../assets/images/policia-logo.png')} 
              style={styles.footerLogo}
              resizeMode="contain"
            />
          </View>
          <Text style={styles.footerText}>
            Policía Nacional de Colombia
          </Text>
          <Text style={styles.footerSubtext}>
            App - SaveLife
          </Text>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: Colors.backgroundLight,
  },
  contentContainer: {
    flex: 1,
  },
  heroContainer: {
    width: '100%',
    height: 180,
    position: 'relative',
  },
  heroBanner: {
    width: '100%',
    height: '100%',
  },
  heroOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 69, 124, 0.75)',
    justifyContent: 'center',
    paddingHorizontal: 20,
  },
  heroTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: Colors.light,
    marginBottom: 8,
  },
  heroSubtitle: {
    fontSize: 16,
    color: Colors.light,
    opacity: 0.9,
  },
  sectionContainer: {
    padding: 16,
    marginBottom: 16,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: Colors.primary,
    marginBottom: 16,
  },
  tipContainer: {
    backgroundColor: Colors.light,
    borderRadius: 8,
    padding: 16,
    marginBottom: 12,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.2,
    shadowRadius: 2,
  },
  tipHeader: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  tipIconContainer: {
    width: 36,
    height: 36,
    borderRadius: 18,
    backgroundColor: Colors.primary,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  tipTitle: {
    flex: 1,
    fontSize: 16,
    fontWeight: 'bold',
    color: Colors.dark,
  },
  tipDescription: {
    fontSize: 14,
    color: Colors.textDark,
    lineHeight: 22,
    marginTop: 12,
    marginLeft: 48,
  },
  extortionTypesContainer: {
    marginBottom: 16,
  },
  extortionTypeCard: {
    backgroundColor: Colors.light,
    borderRadius: 8,
    padding: 16,
    marginBottom: 12,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.2,
    shadowRadius: 2,
  },
  extortionIconContainer: {
    width: 50,
    height: 50,
    borderRadius: 25,
    backgroundColor: Colors.backgroundPrimary,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 12,
  },
  extortionTypeTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: Colors.dark,
    marginBottom: 8,
  },
  extortionTypeDescription: {
    fontSize: 14,
    color: Colors.textDark,
    lineHeight: 20,
  },
  resourceLinkContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: Colors.light,
    borderRadius: 8,
    padding: 16,
    marginBottom: 12,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.2,
    shadowRadius: 2,
  },
  resourceLinkIconContainer: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: Colors.backgroundPrimary,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  resourceLinkContent: {
    flex: 1,
  },
  resourceLinkTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: Colors.dark,
    marginBottom: 4,
  },
  resourceLinkDescription: {
    fontSize: 13,
    color: Colors.textSecondary,
  },
  footer: {
    alignItems: 'center',
    paddingVertical: 24,
    backgroundColor: Colors.backgroundPrimary,
    borderTopWidth: 1,
    borderTopColor: Colors.grey,
  },
  logoContainer: {
    width: 60,
    height: 60,
    borderRadius: 30,
    backgroundColor: Colors.light,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 12,
  },
  footerLogo: {
    width: 48,
    height: 48,
  },
  footerText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: Colors.primary,
    marginBottom: 4,
  },
  footerSubtext: {
    fontSize: 14,
    color: Colors.textSecondary,
  },
});
</file>

<file path="app/reportar.tsx">
import React, { useState } from 'react';
import { 
  View, 
  Text, 
  StyleSheet, 
  ScrollView, 
  TextInput,
  TouchableOpacity,
  Alert,
  Switch,
  KeyboardAvoidingView,
  Platform
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { FontAwesome5 } from '@expo/vector-icons';

import { Colors } from '../constants/Colors';
import AppButton from '../components/AppButton';
import PoliceHeader from '../components/PoliceHeader';

export default function ReportarScreen() {
  const [phoneNumber, setPhoneNumber] = useState('');
  const [date, setDate] = useState('');
  const [time, setTime] = useState('');
  const [description, setDescription] = useState('');
  const [anonymous, setAnonymous] = useState(false);
  const [reporterName, setReporterName] = useState('');
  const [reporterContact, setReporterContact] = useState('');
  const [hasEvidence, setHasEvidence] = useState(false);
  const [termsAccepted, setTermsAccepted] = useState(false);
  const [loading, setLoading] = useState(false);

  const handleSubmit = () => {
    // Validation
    if (!phoneNumber || !date || !time || !description) {
      Alert.alert('Error', 'Por favor complete todos los campos obligatorios');
      return;
    }

    if (!anonymous && (!reporterName || !reporterContact)) {
      Alert.alert('Error', 'Por favor ingrese su nombre y contacto');
      return;
    }

    if (!termsAccepted) {
      Alert.alert('Error', 'Debe aceptar los términos y condiciones para continuar');
      return;
    }

    // Submit report logic
    setLoading(true);
    
    // Simulate API call
    setTimeout(() => {
      setLoading(false);
      Alert.alert(
        'Reporte Enviado',
        'Su reporte ha sido enviado exitosamente. Un oficial se pondrá en contacto con usted a la brevedad.',
        [
          { 
            text: 'OK', 
            onPress: handleReset 
          }
        ]
      );
    }, 1500);
  };

  const handleReset = () => {
    setPhoneNumber('');
    setDate('');
    setTime('');
    setDescription('');
    setAnonymous(false);
    setReporterName('');
    setReporterContact('');
    setHasEvidence(false);
    setTermsAccepted(false);
  };

  return (
    <SafeAreaView style={styles.container} edges={['bottom']}>
      <PoliceHeader 
        title="Reportar Incidente" 
        subtitle="Ayúdenos a combatir la extorsión" 
      />
      
      <KeyboardAvoidingView 
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={{ flex: 1 }}
      >
        <ScrollView style={styles.contentContainer}>
          <View style={styles.infoContainer}>
            <View style={styles.infoIconContainer}>
              <FontAwesome5 name="info-circle" size={24} color={Colors.primary} />
            </View>
            <Text style={styles.infoText}>
              La información proporcionada es confidencial y será utilizada exclusivamente 
              para fines de investigación por la Policía Nacional de Colombia.
            </Text>
          </View>

          {/* Form Section */}
          <View style={styles.formContainer}>
            <Text style={styles.sectionTitle}>Información del Incidente</Text>
            
            <View style={styles.inputGroup}>
              <Text style={styles.label}>Número Telefónico Sospechoso *</Text>
              <View style={styles.phoneInputContainer}>
                <FontAwesome5 name="phone" size={16} color={Colors.primary} style={styles.inputIcon} />
                <TextInput
                  style={styles.input}
                  value={phoneNumber}
                  onChangeText={setPhoneNumber}
                  placeholder="Ej: 321 456 7890"
                  keyboardType="phone-pad"
                />
              </View>
            </View>
            
            <View style={styles.row}>
              <View style={[styles.inputGroup, { flex: 1, marginRight: 8 }]}>
                <Text style={styles.label}>Fecha *</Text>
                <TextInput
                  style={styles.input}
                  value={date}
                  onChangeText={setDate}
                  placeholder="DD/MM/AAAA"
                />
              </View>
              
              <View style={[styles.inputGroup, { flex: 1, marginLeft: 8 }]}>
                <Text style={styles.label}>Hora *</Text>
                <TextInput
                  style={styles.input}
                  value={time}
                  onChangeText={setTime}
                  placeholder="HH:MM"
                />
              </View>
            </View>
            
            <View style={styles.inputGroup}>
              <Text style={styles.label}>Descripción del Incidente *</Text>
              <TextInput
                style={[styles.input, styles.textArea]}
                value={description}
                onChangeText={setDescription}
                placeholder="Describa detalles de la llamada o mensaje, amenazas recibidas, solicitudes realizadas, etc."
                multiline
                numberOfLines={4}
                textAlignVertical="top"
              />
            </View>
            
            <View style={styles.switchContainer}>
              <Text style={styles.switchLabel}>¿Cuenta con evidencia? (grabaciones, mensajes)</Text>
              <Switch
                value={hasEvidence}
                onValueChange={setHasEvidence}
                trackColor={{ false: '#D0D0D0', true: Colors.primary }}
                thumbColor={hasEvidence ? Colors.secondary : '#f4f3f4'}
              />
            </View>
          </View>
          
          {/* Reporter Information */}
          <View style={styles.formContainer}>
            <Text style={styles.sectionTitle}>Información del Denunciante</Text>
            
            <View style={styles.switchContainer}>
              <Text style={styles.switchLabel}>Realizar denuncia anónima</Text>
              <Switch
                value={anonymous}
                onValueChange={setAnonymous}
                trackColor={{ false: '#D0D0D0', true: Colors.primary }}
                thumbColor={anonymous ? Colors.secondary : '#f4f3f4'}
              />
            </View>
            
            {!anonymous && (
              <>
                <View style={styles.inputGroup}>
                  <Text style={styles.label}>Nombre Completo *</Text>
                  <TextInput
                    style={styles.input}
                    value={reporterName}
                    onChangeText={setReporterName}
                    placeholder="Ingrese su nombre completo"
                  />
                </View>
                
                <View style={styles.inputGroup}>
                  <Text style={styles.label}>Teléfono de Contacto *</Text>
                  <TextInput
                    style={styles.input}
                    value={reporterContact}
                    onChangeText={setReporterContact}
                    placeholder="Ingrese su número de contacto"
                    keyboardType="phone-pad"
                  />
                </View>
              </>
            )}
          </View>
          
          {/* Terms and Conditions */}
          <View style={styles.termsContainer}>
            <TouchableOpacity 
              style={styles.termsCheckbox} 
              onPress={() => setTermsAccepted(!termsAccepted)}
            >
              <View style={[
                styles.checkbox, 
                termsAccepted && styles.checkboxActive
              ]}>
                {termsAccepted && <FontAwesome5 name="check" size={12} color={Colors.light} />}
              </View>
              <Text style={styles.termsText}>
                Acepto los términos y condiciones y autorizo el tratamiento de mis datos personales
              </Text>
            </TouchableOpacity>
          </View>
          
          {/* Submit Buttons */}
          <View style={styles.buttonContainer}>
            <AppButton 
              title="Enviar Reporte" 
              variant="primary"
              loading={loading}
              disabled={loading}
              onPress={handleSubmit}
            />
            <AppButton 
              title="Cancelar" 
              variant="outline"
              style={{ marginTop: 12 }}
              onPress={handleReset}
              disabled={loading}
            />
          </View>
          
          <View style={styles.note}>
            <Text style={styles.noteText}>
              * Campos obligatorios
            </Text>
          </View>
        </ScrollView>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: Colors.backgroundLight,
  },
  contentContainer: {
    flex: 1,
    padding: 16,
  },
  infoContainer: {
    flexDirection: 'row',
    backgroundColor: Colors.backgroundPrimary,
    borderRadius: 8,
    padding: 16,
    marginBottom: 16,
    borderLeftWidth: 4,
    borderLeftColor: Colors.primary,
  },
  infoIconContainer: {
    marginRight: 12,
  },
  infoText: {
    flex: 1,
    fontSize: 14,
    color: Colors.textDark,
    lineHeight: 20,
  },
  formContainer: {
    backgroundColor: Colors.light,
    borderRadius: 8,
    padding: 16,
    marginBottom: 16,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.2,
    shadowRadius: 2,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: Colors.primary,
    marginBottom: 16,
  },
  inputGroup: {
    marginBottom: 16,
  },
  label: {
    fontSize: 14,
    fontWeight: '600',
    color: Colors.textDark,
    marginBottom: 8,
  },
  phoneInputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#DDDDDD',
    borderRadius: 8,
    paddingHorizontal: 12,
    backgroundColor: '#FFFFFF',
  },
  inputIcon: {
    marginRight: 8,
  },
  input: {
    flex: 1,
    height: 44,
    paddingHorizontal: 12,
    borderWidth: 1,
    borderColor: '#DDDDDD',
    borderRadius: 8,
    backgroundColor: '#FFFFFF',
  },
  textArea: {
    height: 100,
    paddingTop: 12,
  },
  row: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  switchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginBottom: 16,
  },
  switchLabel: {
    fontSize: 14,
    fontWeight: '600',
    color: Colors.textDark,
    flex: 1,
  },
  termsContainer: {
    marginBottom: 16,
  },
  termsCheckbox: {
    flexDirection: 'row',
    alignItems: 'flex-start',
  },
  checkbox: {
    width: 20,
    height: 20,
    borderWidth: 2,
    borderColor: Colors.primary,
    borderRadius: 4,
    marginRight: 8,
    alignItems: 'center',
    justifyContent: 'center',
    marginTop: 2,
  },
  checkboxActive: {
    backgroundColor: Colors.primary,
  },
  termsText: {
    flex: 1,
    fontSize: 14,
    color: Colors.textDark,
    lineHeight: 20,
  },
  buttonContainer: {
    marginBottom: 16,
  },
  note: {
    marginBottom: 24,
  },
  noteText: {
    fontSize: 12,
    color: Colors.textSecondary,
    textAlign: 'center',
  },
});
</file>

<file path="components/AppButton.tsx">
import React from 'react';
import { 
  TouchableOpacity, 
  Text, 
  StyleSheet, 
  TouchableOpacityProps,
  ActivityIndicator
} from 'react-native';

type ButtonVariant = 'primary' | 'secondary' | 'danger' | 'outline';

interface AppButtonProps extends TouchableOpacityProps {
  title: string;
  variant?: ButtonVariant;
  loading?: boolean;
}

// Colombian Police colors
const COLORS = {
  primary: '#00457C', // Police blue
  secondary: '#008F39', // Police green
  accent: '#F6B40E', // Colombian flag yellow
  light: '#FFFFFF',
  dark: '#002855',
  grey: '#E6E6E6',
  danger: '#D32F2F'
};

export default function AppButton({ 
  title, 
  variant = 'primary', 
  loading = false,
  disabled = false,
  ...rest 
}: AppButtonProps) {
  
  const getButtonStyles = () => {
    switch (variant) {
      case 'primary':
        return styles.primaryButton;
      case 'secondary':
        return styles.secondaryButton;
      case 'danger':
        return styles.dangerButton;
      case 'outline':
        return styles.outlineButton;
      default:
        return styles.primaryButton;
    }
  };

  const getTextStyles = () => {
    switch (variant) {
      case 'outline':
        return styles.outlineText;
      default:
        return styles.text;
    }
  };

  return (
    <TouchableOpacity 
      style={[
        styles.button, 
        getButtonStyles(),
        (disabled || loading) && styles.disabledButton
      ]} 
      disabled={disabled || loading}
      {...rest}
    >
      {loading ? (
        <ActivityIndicator color={variant === 'outline' ? COLORS.primary : COLORS.light} />
      ) : (
        <Text style={[
          styles.text, 
          getTextStyles(),
          (disabled || loading) && styles.disabledText
        ]}>
          {title}
        </Text>
      )}
    </TouchableOpacity>
  );
}

const styles = StyleSheet.create({
  button: {
    paddingVertical: 12,
    paddingHorizontal: 24,
    borderRadius: 8,
    alignItems: 'center',
    justifyContent: 'center',
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  primaryButton: {
    backgroundColor: COLORS.primary,
  },
  secondaryButton: {
    backgroundColor: COLORS.secondary,
  },
  dangerButton: {
    backgroundColor: COLORS.danger,
  },
  outlineButton: {
    backgroundColor: 'transparent',
    borderWidth: 2,
    borderColor: COLORS.primary,
  },
  text: {
    color: COLORS.light,
    fontSize: 16,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  outlineText: {
    color: COLORS.primary,
  },
  disabledButton: {
    opacity: 0.6,
  },
  disabledText: {
    opacity: 0.8,
  }
});
</file>

<file path="components/EmergencyContactCard.tsx">
import React from 'react';
import { View, Text, StyleSheet, TouchableOpacity, Linking, Platform } from 'react-native';
import { FontAwesome5 } from '@expo/vector-icons';

// Colombian Police colors
const COLORS = {
  primary: '#00457C', // Police blue
  secondary: '#008F39', // Police green
  accent: '#F6B40E', // Colombian flag yellow
  light: '#FFFFFF',
  dark: '#002855',
  grey: '#E6E6E6',
  danger: '#D32F2F',
};

interface EmergencyContactCardProps {
  title: string;
  phoneNumber: string;
  description?: string;
  icon?: string;
  isPrimary?: boolean;
}

export default function EmergencyContactCard({
  title,
  phoneNumber,
  description,
  icon = 'phone',
  isPrimary = false,
}: EmergencyContactCardProps) {
  
  const handleCall = () => {
    Linking.openURL(`tel:${phoneNumber}`);
  };

  return (
    <TouchableOpacity 
      style={[
        styles.container, 
        isPrimary && styles.primaryContainer
      ]} 
      onPress={handleCall}
      activeOpacity={0.8}
    >
      <View style={[
        styles.iconContainer,
        isPrimary && styles.primaryIconContainer
      ]}>
        <FontAwesome5 
          name={icon} 
          size={24} 
          color={isPrimary ? COLORS.light : COLORS.primary}
        />
      </View>
      <View style={styles.contentContainer}>
        <Text style={[
          styles.title,
          isPrimary && styles.primaryTitle
        ]}>
          {title}
        </Text>
        <Text style={[
          styles.phoneNumber,
          isPrimary && styles.primaryPhoneNumber
        ]}>
          {phoneNumber}
        </Text>
        {description && (
          <Text style={[
            styles.description,
            isPrimary && styles.primaryDescription
          ]}>
            {description}
          </Text>
        )}
      </View>
      <View style={styles.callButtonContainer}>
        <View style={[
          styles.callButton,
          isPrimary && styles.primaryCallButton
        ]}>
          <FontAwesome5 
            name="phone" 
            size={16} 
            color={isPrimary ? COLORS.primary : COLORS.light} 
          />
          <Text style={[
            styles.callButtonText,
            isPrimary && styles.primaryCallButtonText
          ]}>
            Llamar
          </Text>
        </View>
      </View>
    </TouchableOpacity>
  );
}

const styles = StyleSheet.create({
  container: {
    flexDirection: 'row',
    backgroundColor: COLORS.light,
    borderRadius: 8,
    padding: 16,
    marginVertical: 8,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.2,
    shadowRadius: 2,
    alignItems: 'center',
  },
  primaryContainer: {
    backgroundColor: COLORS.primary,
  },
  iconContainer: {
    width: 50,
    height: 50,
    borderRadius: 25,
    backgroundColor: COLORS.grey,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 16,
  },
  primaryIconContainer: {
    backgroundColor: COLORS.accent,
  },
  contentContainer: {
    flex: 1,
  },
  title: {
    fontSize: 16,
    fontWeight: 'bold',
    color: COLORS.dark,
    marginBottom: 4,
  },
  primaryTitle: {
    color: COLORS.light,
  },
  phoneNumber: {
    fontSize: 14,
    color: COLORS.primary,
    fontWeight: '600',
    marginBottom: 4,
  },
  primaryPhoneNumber: {
    color: COLORS.accent,
  },
  description: {
    fontSize: 12,
    color: '#666',
  },
  primaryDescription: {
    color: COLORS.light,
    opacity: 0.9,
  },
  callButtonContainer: {
    marginLeft: 8,
  },
  callButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: COLORS.primary,
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 16,
  },
  primaryCallButton: {
    backgroundColor: COLORS.light,
  },
  callButtonText: {
    color: COLORS.light,
    fontSize: 12,
    fontWeight: 'bold',
    marginLeft: 4,
  },
  primaryCallButtonText: {
    color: COLORS.primary,
  },
});
</file>

<file path="components/PoliceHeader.tsx">
import React from 'react';
import { View, Image, StyleSheet, Text } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';

interface PoliceHeaderProps {
  title?: string;
  subtitle?: string;
  showLogo?: boolean;
}

// Colombian Police colors
const COLORS = {
  primary: '#00457C', // Police blue
  secondary: '#008F39', // Police green
  accent: '#F6B40E', // Colombian flag yellow
  light: '#FFFFFF',
  dark: '#002855',
  grey: '#E6E6E6',
};

export default function PoliceHeader({
  title,
  subtitle,
}: PoliceHeaderProps) {
  return (
    <SafeAreaView style={styles.container} edges={['top']}>
      <View style={styles.content}>
        <View style={styles.textContainer}>
          {title && <Text style={styles.title}>{title}</Text>}
          {subtitle && <Text style={styles.subtitle}>{subtitle}</Text>}
        </View>
      </View>
      
      {/* Flag color bar */}
      <View style={styles.flagStripe}>
        <View style={[styles.flagColor, { backgroundColor: '#FEE94E' }]} />
        <View style={[styles.flagColor, { backgroundColor: '#003893' }]} />
        <View style={[styles.flagColor, { backgroundColor: '#CE1126' }]} />
      </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    backgroundColor: COLORS.primary,
  },
  content: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
  },
  logo: {
    width: 40,
    height: 40,
    marginRight: 12,
  },
  textContainer: {
    flex: 1,
  },
  title: {
    color: COLORS.light,
    fontSize: 18,
    fontWeight: 'bold',
  },
  subtitle: {
    color: COLORS.light,
    fontSize: 14,
    opacity: 0.9,
  },
  flagStripe: {
    flexDirection: 'row',
    height: 4,
  },
  flagColor: {
    flex: 1,
    height: '100%',
  },
});
</file>

<file path="components/SuspiciousCallCard.tsx">
import React from 'react';
import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';
import { FontAwesome5 } from '@expo/vector-icons';

// Colombian Police colors
const COLORS = {
  primary: '#00457C', // Police blue
  secondary: '#008F39', // Police green
  accent: '#F6B40E', // Colombian flag yellow
  light: '#FFFFFF',
  dark: '#002855',
  grey: '#E6E6E6',
  danger: '#D32F2F',
  warning: '#FF9800',
  success: '#4CAF50',
};

type RiskLevel = 'high' | 'medium' | 'low';

interface SuspiciousCallCardProps {
  phoneNumber: string;
  date: string;
  time: string;
  riskLevel: RiskLevel;
  description?: string;
  onPress?: () => void;
}

export default function SuspiciousCallCard({
  phoneNumber,
  date,
  time,
  riskLevel,
  description,
  onPress,
}: SuspiciousCallCardProps) {
  
  const getRiskLevelColor = () => {
    switch (riskLevel) {
      case 'high':
        return COLORS.danger;
      case 'medium':
        return COLORS.warning;
      case 'low':
        return COLORS.success;
      default:
        return COLORS.warning;
    }
  };

  const getRiskLevelText = () => {
    switch (riskLevel) {
      case 'high':
        return 'Alto riesgo';
      case 'medium':
        return 'Riesgo medio';
      case 'low':
        return 'Riesgo bajo';
      default:
        return 'Riesgo desconocido';
    }
  };

  const getRiskLevelIcon = () => {
    switch (riskLevel) {
      case 'high':
        return 'exclamation-triangle';
      case 'medium':
        return 'exclamation-circle';
      case 'low':
        return 'info-circle';
      default:
        return 'question-circle';
    }
  };

  return (
    <TouchableOpacity 
      style={styles.container} 
      onPress={onPress}
      activeOpacity={0.8}
    >
      <View style={styles.header}>
        <View style={styles.phoneContainer}>
          <FontAwesome5 
            name="phone" 
            size={16} 
            color={COLORS.primary} 
            style={styles.phoneIcon} 
          />
          <Text style={styles.phoneNumber}>{phoneNumber}</Text>
        </View>
        <View style={[styles.riskBadge, { backgroundColor: getRiskLevelColor() }]}>
          <FontAwesome5 
            name={getRiskLevelIcon()} 
            size={12} 
            color={COLORS.light} 
          />
          <Text style={styles.riskText}>{getRiskLevelText()}</Text>
        </View>
      </View>

      <View style={styles.infoContainer}>
        <View style={styles.infoRow}>
          <FontAwesome5 
            name="calendar-alt" 
            size={14} 
            color={COLORS.primary} 
            style={styles.infoIcon} 
          />
          <Text style={styles.infoText}>{date}</Text>
        </View>
        <View style={styles.infoRow}>
          <FontAwesome5 
            name="clock" 
            size={14} 
            color={COLORS.primary} 
            style={styles.infoIcon} 
          />
          <Text style={styles.infoText}>{time}</Text>
        </View>
      </View>

      {description && (
        <Text style={styles.description} numberOfLines={2}>
          {description}
        </Text>
      )}
    </TouchableOpacity>
  );
}

const styles = StyleSheet.create({
  container: {
    backgroundColor: COLORS.light,
    borderRadius: 8,
    padding: 16,
    marginVertical: 8,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.2,
    shadowRadius: 2,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  phoneContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  phoneIcon: {
    marginRight: 8,
  },
  phoneNumber: {
    fontSize: 16,
    fontWeight: 'bold',
    color: COLORS.dark,
  },
  riskBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
  },
  riskText: {
    color: COLORS.light,
    fontSize: 12,
    fontWeight: 'bold',
    marginLeft: 4,
  },
  infoContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 8,
  },
  infoRow: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  infoIcon: {
    marginRight: 6,
  },
  infoText: {
    fontSize: 14,
    color: COLORS.dark,
  },
  description: {
    fontSize: 14,
    color: '#555',
    marginTop: 8,
  },
});
</file>

<file path="scripts/reset-project.js">
#!/usr/bin/env node

/**
 * This script is used to reset the project to a blank state.
 * It deletes or moves the /app, /components, /hooks, /scripts, and /constants directories to /app-example based on user input and creates a new /app directory with an index.tsx and _layout.tsx file.
 * You can remove the `reset-project` script from package.json and safely delete this file after running it.
 */

const fs = require("fs");
const path = require("path");
const readline = require("readline");

const root = process.cwd();
const oldDirs = ["app", "components", "hooks", "constants", "scripts"];
const exampleDir = "app-example";
const newAppDir = "app";
const exampleDirPath = path.join(root, exampleDir);

const indexContent = `import { Text, View } from "react-native";

export default function Index() {
  return (
    <View
      style={{
        flex: 1,
        justifyContent: "center",
        alignItems: "center",
      }}
    >
      <Text>Edit app/index.tsx to edit this screen.</Text>
    </View>
  );
}
`;

const layoutContent = `import { Stack } from "expo-router";

export default function RootLayout() {
  return <Stack />;
}
`;

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

const moveDirectories = async (userInput) => {
  try {
    if (userInput === "y") {
      // Create the app-example directory
      await fs.promises.mkdir(exampleDirPath, { recursive: true });
      console.log(`📁 /${exampleDir} directory created.`);
    }

    // Move old directories to new app-example directory or delete them
    for (const dir of oldDirs) {
      const oldDirPath = path.join(root, dir);
      if (fs.existsSync(oldDirPath)) {
        if (userInput === "y") {
          const newDirPath = path.join(root, exampleDir, dir);
          await fs.promises.rename(oldDirPath, newDirPath);
          console.log(`➡️ /${dir} moved to /${exampleDir}/${dir}.`);
        } else {
          await fs.promises.rm(oldDirPath, { recursive: true, force: true });
          console.log(`❌ /${dir} deleted.`);
        }
      } else {
        console.log(`➡️ /${dir} does not exist, skipping.`);
      }
    }

    // Create new /app directory
    const newAppDirPath = path.join(root, newAppDir);
    await fs.promises.mkdir(newAppDirPath, { recursive: true });
    console.log("\n📁 New /app directory created.");

    // Create index.tsx
    const indexPath = path.join(newAppDirPath, "index.tsx");
    await fs.promises.writeFile(indexPath, indexContent);
    console.log("📄 app/index.tsx created.");

    // Create _layout.tsx
    const layoutPath = path.join(newAppDirPath, "_layout.tsx");
    await fs.promises.writeFile(layoutPath, layoutContent);
    console.log("📄 app/_layout.tsx created.");

    console.log("\n✅ Project reset complete. Next steps:");
    console.log(
      `1. Run \`npx expo start\` to start a development server.\n2. Edit app/index.tsx to edit the main screen.${
        userInput === "y"
          ? `\n3. Delete the /${exampleDir} directory when you're done referencing it.`
          : ""
      }`
    );
  } catch (error) {
    console.error(`❌ Error during script execution: ${error.message}`);
  }
};

rl.question(
  "Do you want to move existing files to /app-example instead of deleting them? (Y/n): ",
  (answer) => {
    const userInput = answer.trim().toLowerCase() || "y";
    if (userInput === "y" || userInput === "n") {
      moveDirectories(userInput).finally(() => rl.close());
    } else {
      console.log("❌ Invalid input. Please enter 'Y' or 'N'.");
      rl.close();
    }
  }
);
</file>

<file path=".gitignore">
# Learn more https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files

# dependencies
node_modules/

# Expo
.expo/
dist/
web-build/
expo-env.d.ts

# Native
*.orig.*
*.jks
*.p8
*.p12
*.key
*.mobileprovision

# Metro
.metro-health-check*

# debug
npm-debug.*
yarn-debug.*
yarn-error.*

# macOS
.DS_Store
*.pem

# local env files
.env*.local

# typescript
*.tsbuildinfo

app-example
</file>

<file path="eas.json">
{
  "cli": {
    "version": ">= 5.9.0"
  },
  "build": {
    "development": {
      "developmentClient": true,
      "distribution": "internal",
      "android": {
        "buildType": "apk"
      }
    },
    "preview": {
      "distribution": "internal",
      "android": {
        "buildType": "apk"
      }
    },
    "production": {
      "android": {
        "buildType": "app-bundle"
      }
    }
  },
  "submit": {
    "production": {}
  }
}
</file>

<file path="package.json">
{
  "name": "aplicacion",
  "main": "expo-router/entry",
  "version": "1.0.0",
  "scripts": {
    "start": "expo start",
    "reset-project": "node ./scripts/reset-project.js",
    "android": "expo start --android",
    "ios": "expo start --ios",
    "web": "expo start --web",
    "test": "jest --watchAll",
    "lint": "expo lint"
  },
  "jest": {
    "preset": "jest-expo"
  },
  "dependencies": {
    "@expo/vector-icons": "^14.0.2",
    "@react-navigation/bottom-tabs": "^7.2.0",
    "@react-navigation/native": "^7.0.14",
    "expo": "~52.0.41",
    "expo-blur": "~14.0.3",
    "expo-constants": "~17.0.8",
    "expo-font": "~13.0.4",
    "expo-haptics": "~14.0.1",
    "expo-linking": "~7.0.5",
    "expo-router": "~4.0.19",
    "expo-splash-screen": "~0.29.22",
    "expo-status-bar": "~2.0.1",
    "expo-symbols": "~0.2.2",
    "expo-system-ui": "~4.0.8",
    "expo-web-browser": "~14.0.2",
    "react": "18.3.1",
    "react-dom": "18.3.1",
    "react-native": "0.76.7",
    "react-native-gesture-handler": "~2.20.2",
    "react-native-reanimated": "~3.16.1",
    "react-native-safe-area-context": "4.12.0",
    "react-native-screens": "~4.4.0",
    "react-native-web": "~0.19.13",
    "react-native-webview": "13.12.5"
  },
  "devDependencies": {
    "@babel/core": "^7.25.2",
    "@types/jest": "^29.5.12",
    "@types/react": "~18.3.12",
    "@types/react-test-renderer": "^18.3.0",
    "jest": "^29.2.1",
    "jest-expo": "~52.0.6",
    "react-test-renderer": "18.3.1",
    "typescript": "^5.3.3"
  },
  "private": true
}
</file>

<file path="tsconfig.json">
{
  "extends": "expo/tsconfig.base",
  "compilerOptions": {
    "strict": true,
    "paths": {
      "@/*": [
        "./*"
      ]
    }
  },
  "include": [
    "**/*.ts",
    "**/*.tsx",
    ".expo/types/**/*.ts",
    "expo-env.d.ts"
  ]
}
</file>

<file path="app/_layout.tsx">
import { Tabs } from 'expo-router';
import { useColorScheme } from 'react-native';
import { useFonts } from 'expo-font';
import * as SplashScreen from 'expo-splash-screen';
import { useEffect } from 'react';
import { FontAwesome5 } from '@expo/vector-icons';

// Colombian Police colors
const COLORS = {
  primary: '#00457C', // Police blue
  secondary: '#008F39', // Police green
  accent: '#F6B40E', // Colombian flag yellow
  light: '#FFFFFF',
  dark: '#002855',
  grey: '#E6E6E6',
  danger: '#D32F2F'
};

// Keep the splash screen visible while we fetch resources
SplashScreen.preventAutoHideAsync();

export default function RootLayout() {
  const colorScheme = useColorScheme();

  const [loaded, error] = useFonts({
    'RobotoCondensed-Regular': require('../assets/fonts/Roboto_Condensed-Regular.ttf'),
    'RobotoCondensed-Bold': require('../assets/fonts/Roboto_Condensed-Bold.ttf'),
  });

  useEffect(() => {
    if (error) throw error;
  }, [error]);

  useEffect(() => {
    if (loaded) {
      SplashScreen.hideAsync();
    }
  }, [loaded]);

  if (!loaded) {
    return null;
  }

  return (
    <Tabs
      screenOptions={{
        tabBarActiveTintColor: COLORS.primary,
        tabBarInactiveTintColor: '#757575',
        tabBarStyle: {
          backgroundColor: COLORS.light,
          borderTopColor: COLORS.grey,
        },
        headerStyle: {
          backgroundColor: COLORS.primary,
        },
        headerTintColor: COLORS.light,
        headerTitleStyle: {
          fontFamily: 'RobotoCondensed-Bold',
        },
      }}>
      <Tabs.Screen
        name="index"
        options={{
          title: 'Inicio',
          tabBarIcon: ({ color }) => <FontAwesome5 name="home" size={24} color={color} />,
        }}
      />
      <Tabs.Screen
        name="alertas"
        options={{
          title: 'Alertas',
          tabBarIcon: ({ color }) => <FontAwesome5 name="bell" size={24} color={color} />,
        }}
      />
      <Tabs.Screen
        name="reportar"
        options={{
          title: 'Reportar',
          tabBarIcon: ({ color }) => <FontAwesome5 name="exclamation-triangle" size={24} color={color} />,
        }}
      />
      <Tabs.Screen
        name="grabacion"
        options={{
          title: 'Grabación',
          tabBarIcon: ({ color }) => <FontAwesome5 name="microphone" size={24} color={color} />,
        }}
      />
      <Tabs.Screen
        name="recursos"
        options={{
          title: 'Recursos',
          tabBarIcon: ({ color }) => <FontAwesome5 name="info-circle" size={24} color={color} />,
        }}
      />
    </Tabs>
  );
}
</file>

<file path="app/alertas.tsx">
import React, { useState } from "react";
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  FlatList,
  Switch,
  Alert,
} from "react-native";
import { SafeAreaView } from "react-native-safe-area-context";
import { FontAwesome5 } from "@expo/vector-icons";

import { Colors } from "../constants/Colors";
import SuspiciousCallCard from "../components/SuspiciousCallCard";
import AppButton from "../components/AppButton";
import PoliceHeader from "../components/PoliceHeader";

type RiskLevel = "high" | "medium" | "low";

interface SuspiciousCall {
  id: string;
  phoneNumber: string;
  date: string;
  time: string;
  riskLevel: RiskLevel;
  description: string;
}

// Mock data for suspicious calls
const SUSPICIOUS_CALLS: SuspiciousCall[] = [
  {
    id: "1",
    phoneNumber: "+57 321 456 7890",
    date: "25/03/2023",
    time: "10:30 AM",
    riskLevel: "high",
    description:
      "Llamada que se identifica como banco solicitando datos personales y claves bancarias.",
  },
  {
    id: "2",
    phoneNumber: "+57 300 123 4567",
    date: "23/03/2023",
    time: "3:45 PM",
    riskLevel: "medium",
    description:
      "Supuesto familiar en problemas solicitando dinero para emergencia.",
  },
  {
    id: "3",
    phoneNumber: "+57 310 789 1234",
    date: "22/03/2023",
    time: "5:20 PM",
    riskLevel: "high",
    description:
      "Llamada amenazante haciendo referencia a negocios de la zona.",
  },
  {
    id: "4",
    phoneNumber: "+57 350 987 6543",
    date: "20/03/2023",
    time: "11:05 AM",
    riskLevel: "low",
    description:
      "Supuesta empresa de servicios públicos solicitando pago inmediato.",
  },
  {
    id: "5",
    phoneNumber: "+57 314 159 2653",
    date: "18/03/2023",
    time: "4:10 PM",
    riskLevel: "medium",
    description: "Llamada indicando premio de sorteo no participado.",
  },
];

export default function AlertasScreen() {
  const [blockingEnabled, setBlockingEnabled] = useState(true);
  const [notificationsEnabled, setNotificationsEnabled] = useState(true);

  const handleCallDetail = (item: SuspiciousCall) => {
    Alert.alert(
      `Llamada Sospechosa: ${item.phoneNumber}`,
      `Fecha: ${item.date}\nHora: ${item.time}\nNivel de riesgo: ${
        item.riskLevel === "high"
          ? "Alto"
          : item.riskLevel === "medium"
          ? "Medio"
          : "Bajo"
      }\n\nDescripción: ${item.description}`,
      [{ text: "Cerrar" }]
    );
  };

  return (
    <SafeAreaView style={styles.container} edges={["bottom"]}>
      <PoliceHeader
        title="Sistema de Alertas"
        subtitle="Detección de llamadas sospechosas"
      />

      <View style={styles.contentContainer}>
        {/* Settings Section */}
        <View style={styles.settingsContainer}>
          <Text style={styles.sectionTitle}>Configuración de Alertas</Text>

          <View style={styles.settingRow}>
            <View style={styles.settingTextContainer}>
              <Text style={styles.settingTitle}>Bloqueo Automático</Text>
              <Text style={styles.settingDescription}>
                Bloquear números reportados como extorsión
              </Text>
            </View>
            <Switch
              value={blockingEnabled}
              onValueChange={setBlockingEnabled}
              trackColor={{ false: "#D0D0D0", true: Colors.primary }}
              thumbColor={blockingEnabled ? Colors.secondary : "#f4f3f4"}
            />
          </View>

          <View style={styles.settingRow}>
            <View style={styles.settingTextContainer}>
              <Text style={styles.settingTitle}>Notificaciones</Text>
              <Text style={styles.settingDescription}>
                Recibir alertas de nuevos números reportados
              </Text>
            </View>
            <Switch
              value={notificationsEnabled}
              onValueChange={setNotificationsEnabled}
              trackColor={{ false: "#D0D0D0", true: Colors.primary }}
              thumbColor={notificationsEnabled ? Colors.secondary : "#f4f3f4"}
            />
          </View>
        </View>

        {/* Alert Call Identification */}
        <View style={styles.alertIdentificationContainer}>
          <View style={styles.sectionHeaderRow}>
            <Text style={styles.sectionTitle}>Llamadas Sospechosas</Text>
            <TouchableOpacity style={styles.refreshButton}>
              <FontAwesome5 name="sync-alt" size={16} color={Colors.primary} />
              <Text style={styles.refreshText}>Actualizar</Text>
            </TouchableOpacity>
          </View>

          <View style={styles.alertBox}>
            <View style={styles.alertIconContainer}>
              <FontAwesome5
                name="shield-alt"
                size={28}
                color={Colors.primary}
              />
            </View>
            <View style={styles.alertTextContainer}>
              <Text style={styles.alertTitle}>
                Sistema de identificación de llamadas activo
              </Text>
              <Text style={styles.alertDescription}>
                Identificamos automáticamente llamadas de riesgo en su
                dispositivo.
                {blockingEnabled
                  ? " Las llamadas de alto riesgo serán bloqueadas."
                  : ""}
              </Text>
            </View>
          </View>
        </View>

        {/* Suspicious Calls List */}
        <View style={styles.callsContainer}>
          <Text style={styles.sectionTitle}>
            Historial de Llamadas Sospechosas
          </Text>

          <FlatList
            data={SUSPICIOUS_CALLS}
            keyExtractor={(item) => item.id}
            renderItem={({ item }) => (
              <SuspiciousCallCard
                phoneNumber={item.phoneNumber}
                date={item.date}
                time={item.time}
                riskLevel={item.riskLevel}
                description={item.description}
                onPress={() => handleCallDetail(item)}
              />
            )}
            showsVerticalScrollIndicator={false}
            contentContainerStyle={styles.callsList}
          />
        </View>
      </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: Colors.backgroundLight,
  },
  contentContainer: {
    flex: 1,
    padding: 16,
  },
  settingsContainer: {
    backgroundColor: Colors.light,
    borderRadius: 8,
    padding: 16,
    marginBottom: 16,
    elevation: 2,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.2,
    shadowRadius: 2,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: "bold",
    color: Colors.primary,
    marginBottom: 12,
  },
  settingRow: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    paddingVertical: 8,
    borderBottomWidth: 1,
    borderBottomColor: Colors.grey,
  },
  settingTextContainer: {
    flex: 1,
    marginRight: 16,
  },
  settingTitle: {
    fontSize: 16,
    fontWeight: "600",
    color: Colors.dark,
    marginBottom: 4,
  },
  settingDescription: {
    fontSize: 12,
    color: Colors.textSecondary,
  },
  alertIdentificationContainer: {
    backgroundColor: Colors.light,
    borderRadius: 8,
    padding: 16,
    marginBottom: 16,
    elevation: 2,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.2,
    shadowRadius: 2,
  },
  sectionHeaderRow: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: 12,
  },
  refreshButton: {
    flexDirection: "row",
    alignItems: "center",
  },
  refreshText: {
    color: Colors.primary,
    fontSize: 14,
    marginLeft: 4,
  },
  alertBox: {
    flexDirection: "row",
    backgroundColor: Colors.backgroundPrimary,
    borderRadius: 8,
    padding: 12,
    borderLeftWidth: 4,
    borderLeftColor: Colors.primary,
  },
  alertIconContainer: {
    marginRight: 12,
    justifyContent: "center",
  },
  alertTextContainer: {
    flex: 1,
  },
  alertTitle: {
    fontSize: 16,
    fontWeight: "bold",
    color: Colors.primary,
    marginBottom: 4,
  },
  alertDescription: {
    fontSize: 14,
    color: Colors.textDark,
    lineHeight: 20,
  },
  callsContainer: {
    flex: 1,
  },
  callsList: {
    paddingBottom: 16,
  },
  buttonContainer: {
    marginTop: 8,
    marginBottom: 16,
  },
});
</file>

<file path="app/grabacion.tsx">
import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  Alert,
  FlatList,
  Modal,
  Switch,
  ScrollView,
} from "react-native";
import { SafeAreaView } from "react-native-safe-area-context";
import { FontAwesome5 } from "@expo/vector-icons";

import { Colors } from "../constants/Colors";
import AppButton from "../components/AppButton";
import PoliceHeader from "../components/PoliceHeader";

interface RecordedCall {
  id: string;
  phoneNumber: string;
  date: string;
  time: string;
  duration: string;
  fileSize: string;
}

// Mock data for recorded calls
const RECORDED_CALLS: RecordedCall[] = [
  {
    id: "1",
    phoneNumber: "+57 321 456 7890",
    date: "25/03/2023",
    time: "10:30 AM",
    duration: "3:45",
    fileSize: "2.4 MB",
  },
  {
    id: "2",
    phoneNumber: "+57 300 123 4567",
    date: "23/03/2023",
    time: "3:45 PM",
    duration: "5:20",
    fileSize: "3.1 MB",
  },
  {
    id: "3",
    phoneNumber: "+57 310 789 1234",
    date: "22/03/2023",
    time: "5:20 PM",
    duration: "1:15",
    fileSize: "0.8 MB",
  },
];

export default function GrabacionScreen() {
  const [isRecording, setIsRecording] = useState(false);
  const [recordingTime, setRecordingTime] = useState(0);
  const [recordAllCalls, setRecordAllCalls] = useState(false);
  const [recordSuspiciousCalls, setRecordSuspiciousCalls] = useState(true);
  const [consentModalVisible, setConsentModalVisible] = useState(false);
  const [consentAccepted, setConsentAccepted] = useState(false);

  useEffect(() => {
    // Check if consent was previously given
    // For demo purposes, we'll just show the modal when the screen is first loaded
    if (!consentAccepted) {
      setConsentModalVisible(true);
    }
  }, []);

  useEffect(() => {
    let interval: NodeJS.Timeout | undefined;

    if (isRecording) {
      interval = setInterval(() => {
        setRecordingTime((prev) => prev + 1);
      }, 1000);
    } else {
      setRecordingTime(0);
    }

    return () => {
      if (interval) clearInterval(interval);
    };
  }, [isRecording]);

  const formatTime = (seconds: number): string => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs < 10 ? "0" : ""}${secs}`;
  };

  const handleRecordPress = () => {
    if (!consentAccepted) {
      setConsentModalVisible(true);
      return;
    }

    setIsRecording((prev) => !prev);

    if (isRecording) {
      // Stop recording logic
      Alert.alert(
        "Grabación Finalizada",
        `La grabación ha sido guardada (${formatTime(recordingTime)})`,
        [{ text: "OK" }]
      );
    } else {
      // Start recording logic
    }
  };

  const handlePlayRecording = (item: RecordedCall) => {
    // Logic to play a recording
    Alert.alert(
      "Reproduciendo Grabación",
      `Número: ${item.phoneNumber}\nFecha: ${item.date}\nDuración: ${item.duration}`,
      [{ text: "Cerrar" }]
    );
  };

  const handleDeleteRecording = (item: RecordedCall) => {
    // Logic to delete a recording
    Alert.alert(
      "Eliminar Grabación",
      `¿Está seguro que desea eliminar esta grabación?\n\nNúmero: ${item.phoneNumber}\nFecha: ${item.date}`,
      [
        { text: "Cancelar", style: "cancel" },
        { text: "Eliminar", style: "destructive" },
      ]
    );
  };

  const handleShareRecording = (item: RecordedCall) => {
    // Logic to share a recording
    Alert.alert(
      "Compartir Grabación",
      `¿Desea compartir esta grabación con las autoridades?\n\nNúmero: ${item.phoneNumber}\nFecha: ${item.date}`,
      [{ text: "Cancelar", style: "cancel" }, { text: "Compartir" }]
    );
  };

  const handleAcceptConsent = () => {
    setConsentAccepted(true);
    setConsentModalVisible(false);
  };

  const handleRejectConsent = () => {
    Alert.alert(
      "Permiso Requerido",
      "No se pueden grabar llamadas sin aceptar los términos legales. Puede cambiar esta configuración más adelante.",
      [{ text: "OK" }]
    );
    setConsentModalVisible(false);
  };

  const renderRecordingItem = ({ item }: { item: RecordedCall }) => (
    <View style={styles.recordingItem}>
      <View style={styles.recordingInfo}>
        <Text style={styles.phoneNumber}>{item.phoneNumber}</Text>
        <Text style={styles.recordingDetails}>
          {item.date} | {item.time} | {item.duration}
        </Text>
        <Text style={styles.fileSize}>{item.fileSize}</Text>
      </View>

      <View style={styles.recordingActions}>
        <TouchableOpacity
          style={styles.actionButton}
          onPress={() => handlePlayRecording(item)}
        >
          <FontAwesome5 name="play-circle" size={24} color={Colors.primary} />
        </TouchableOpacity>

        <TouchableOpacity
          style={styles.actionButton}
          onPress={() => handleShareRecording(item)}
        >
          <FontAwesome5 name="share-alt" size={22} color={Colors.secondary} />
        </TouchableOpacity>

        <TouchableOpacity
          style={styles.actionButton}
          onPress={() => handleDeleteRecording(item)}
        >
          <FontAwesome5 name="trash-alt" size={22} color={Colors.danger} />
        </TouchableOpacity>
      </View>
    </View>
  );

  return (
    <SafeAreaView style={styles.container} edges={["bottom"]}>
      <PoliceHeader
        title="Grabación de Llamadas"
        subtitle="Registre evidencias de extorsión"
      />

      <ScrollView style={styles.contentContainer}>
        {/* Legal Disclaimer */}
        <View style={styles.disclaimerContainer}>
          <FontAwesome5
            name="exclamation-triangle"
            size={20}
            color={Colors.warning}
            style={styles.disclaimerIcon}
          />
          <Text style={styles.disclaimerText}>
            La grabación de llamadas debe realizarse siguiendo las normativas
            legales. Se recomienda informar a la otra persona que la llamada
            está siendo grabada.
          </Text>
        </View>

        {/* Recording Controls */}
        <View style={styles.controlsContainer}>
          {isRecording && (
            <View style={styles.recordingStatus}>
              <View style={styles.recordingIndicator}>
                <View style={styles.recordingDot} />
                <Text style={styles.recordingText}>
                  Grabando | {formatTime(recordingTime)}
                </Text>
              </View>
            </View>
          )}

          <TouchableOpacity
            style={[styles.recordButton, isRecording && styles.recordingActive]}
            onPress={handleRecordPress}
            activeOpacity={0.7}
          >
            <FontAwesome5
              name={isRecording ? "stop-circle" : "microphone"}
              size={32}
              color={Colors.light}
            />
            <Text style={styles.recordButtonText}>
              {isRecording ? "Detener" : "Grabar Llamada"}
            </Text>
          </TouchableOpacity>
        </View>

        {/* Settings */}
        <View style={styles.settingsContainer}>
          <Text style={styles.sectionTitle}>Configuración</Text>

          <View style={styles.settingRow}>
            <View style={styles.settingTextContainer}>
              <Text style={styles.settingTitle}>Grabar todas las llamadas</Text>
              <Text style={styles.settingDescription}>
                Graba automáticamente todas las llamadas entrantes y salientes
              </Text>
            </View>
            <Switch
              value={recordAllCalls}
              onValueChange={setRecordAllCalls}
              trackColor={{ false: "#D0D0D0", true: Colors.primary }}
              thumbColor={recordAllCalls ? Colors.secondary : "#f4f3f4"}
            />
          </View>

          <View style={styles.settingRow}>
            <View style={styles.settingTextContainer}>
              <Text style={styles.settingTitle}>
                Grabar llamadas sospechosas
              </Text>
              <Text style={styles.settingDescription}>
                Graba automáticamente llamadas de números reportados como
                sospechosos
              </Text>
            </View>
            <Switch
              value={recordSuspiciousCalls}
              onValueChange={setRecordSuspiciousCalls}
              trackColor={{ false: "#D0D0D0", true: Colors.primary }}
              thumbColor={recordSuspiciousCalls ? Colors.secondary : "#f4f3f4"}
            />
          </View>
        </View>

        {/* Recordings List */}
        <View style={styles.recordingsContainer}>
          <Text style={styles.sectionTitle}>Grabaciones Recientes</Text>

          {RECORDED_CALLS.length > 0 && (
            <View>
              {RECORDED_CALLS.map((item) => (
                <View key={item.id}>
                  {renderRecordingItem({ item })}
                </View>
              ))}
            </View>
          )}

          {RECORDED_CALLS.length === 0 && (
            <View style={styles.noRecordingsContainer}>
              <FontAwesome5 name="inbox" size={40} color="#CCCCCC" />
              <Text style={styles.noRecordingsText}>
                No hay grabaciones disponibles
              </Text>
            </View>
          )}
        </View>
      </ScrollView>

      {/* Consent Modal */}
      <Modal
        visible={consentModalVisible}
        transparent={true}
        animationType="fade"
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContainer}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>Consentimiento Legal</Text>
            </View>

            <Text style={styles.modalText}>
              Para utilizar la función de grabación de llamadas, debe aceptar
              los siguientes términos:
            </Text>

            <View style={styles.consentItem}>
              <FontAwesome5
                name="check-circle"
                size={16}
                color={Colors.primary}
                style={styles.consentIcon}
              />
              <Text style={styles.consentText}>
                Usted debe informar a la otra parte que la llamada está siendo
                grabada.
              </Text>
            </View>

            <View style={styles.consentItem}>
              <FontAwesome5
                name="check-circle"
                size={16}
                color={Colors.primary}
                style={styles.consentIcon}
              />
              <Text style={styles.consentText}>
                Las grabaciones solo deben utilizarse como evidencia en casos de
                extorsión.
              </Text>
            </View>

            <View style={styles.consentItem}>
              <FontAwesome5
                name="check-circle"
                size={16}
                color={Colors.primary}
                style={styles.consentIcon}
              />
              <Text style={styles.consentText}>
                Usted es responsable del uso legal de las grabaciones.
              </Text>
            </View>

            <View style={styles.modalActions}>
              <AppButton
                title="Rechazar"
                variant="outline"
                onPress={handleRejectConsent}
                style={{ flex: 1, marginRight: 8 }}
              />
              <AppButton
                title="Aceptar"
                variant="primary"
                onPress={handleAcceptConsent}
                style={{ flex: 1, marginLeft: 8 }}
              />
            </View>
          </View>
        </View>
      </Modal>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: Colors.backgroundLight,
  },
  contentContainer: {
    flex: 1,
    padding: 16,
  },
  disclaimerContainer: {
    flexDirection: "row",
    backgroundColor: "#FFFDE7",
    borderRadius: 8,
    padding: 12,
    marginBottom: 16,
    borderWidth: 1,
    borderColor: Colors.warning,
    alignItems: "center",
  },
  disclaimerIcon: {
    marginRight: 12,
  },
  disclaimerText: {
    flex: 1,
    fontSize: 13,
    color: Colors.textDark,
    lineHeight: 18,
  },
  controlsContainer: {
    backgroundColor: Colors.light,
    borderRadius: 8,
    padding: 16,
    marginBottom: 16,
    alignItems: "center",
    elevation: 2,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.2,
    shadowRadius: 2,
  },
  recordingStatus: {
    height: 24,
    marginBottom: 16,
    alignItems: "center",
    justifyContent: "center",
  },
  recordingIndicator: {
    flexDirection: "row",
    alignItems: "center",
  },
  recordingDot: {
    width: 12,
    height: 12,
    borderRadius: 6,
    backgroundColor: Colors.danger,
    marginRight: 8,
  },
  recordingText: {
    color: Colors.danger,
    fontSize: 16,
    fontWeight: "600",
  },
  recordButton: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: Colors.primary,
    paddingVertical: 16,
    paddingHorizontal: 32,
    borderRadius: 30,
    width: "100%",
  },
  recordingActive: {
    backgroundColor: Colors.danger,
  },
  recordButtonText: {
    color: Colors.light,
    fontSize: 18,
    fontWeight: "bold",
    marginLeft: 12,
  },
  settingsContainer: {
    backgroundColor: Colors.light,
    borderRadius: 8,
    padding: 16,
    marginBottom: 16,
    elevation: 2,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.2,
    shadowRadius: 2,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: "bold",
    color: Colors.primary,
    marginBottom: 12,
  },
  settingRow: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    paddingVertical: 8,
    borderBottomWidth: 1,
    borderBottomColor: Colors.grey,
  },
  settingTextContainer: {
    flex: 1,
    marginRight: 16,
  },
  settingTitle: {
    fontSize: 16,
    fontWeight: "600",
    color: Colors.dark,
    marginBottom: 4,
  },
  settingDescription: {
    fontSize: 12,
    color: Colors.textSecondary,
  },
  recordingsContainer: {
    backgroundColor: Colors.light,
    borderRadius: 8,
    padding: 16,
    marginBottom: 16,
    elevation: 2,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.2,
    shadowRadius: 2,
  },
  recordingsList: {
    paddingBottom: 16,
  },
  recordingItem: {
    flexDirection: "row",
    borderBottomWidth: 1,
    borderBottomColor: Colors.grey,
    paddingVertical: 12,
    alignItems: "center",
  },
  recordingInfo: {
    flex: 1,
  },
  phoneNumber: {
    fontSize: 16,
    fontWeight: "600",
    color: Colors.dark,
    marginBottom: 4,
  },
  recordingDetails: {
    fontSize: 14,
    color: Colors.textSecondary,
    marginBottom: 2,
  },
  fileSize: {
    fontSize: 12,
    color: Colors.textSecondary,
  },
  recordingActions: {
    flexDirection: "row",
    alignItems: "center",
  },
  actionButton: {
    padding: 8,
    marginLeft: 8,
  },
  noRecordingsContainer: {
    alignItems: "center",
    justifyContent: "center",
    paddingVertical: 40,
  },
  noRecordingsText: {
    fontSize: 16,
    color: Colors.textSecondary,
    marginTop: 16,
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    justifyContent: "center",
    alignItems: "center",
    padding: 20,
  },
  modalContainer: {
    backgroundColor: Colors.light,
    borderRadius: 12,
    padding: 20,
    width: "100%",
    maxWidth: 400,
    elevation: 5,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.3,
    shadowRadius: 4,
  },
  modalHeader: {
    borderBottomWidth: 1,
    borderBottomColor: Colors.grey,
    paddingBottom: 12,
    marginBottom: 16,
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: "bold",
    color: Colors.primary,
  },
  modalText: {
    fontSize: 16,
    color: Colors.textDark,
    marginBottom: 16,
    lineHeight: 22,
  },
  consentItem: {
    flexDirection: "row",
    marginBottom: 12,
    alignItems: "flex-start",
  },
  consentIcon: {
    marginTop: 2,
    marginRight: 8,
  },
  consentText: {
    flex: 1,
    fontSize: 14,
    color: Colors.textDark,
    lineHeight: 20,
  },
  modalActions: {
    flexDirection: "row",
    marginTop: 20,
  },
});
</file>

<file path="constants/Colors.ts">
/**
 * Color palette for the Anti-Extortion App
 * Based on the Colombian Police visual identity
 */

export const Colors = {
  // Primary palette - based on Colombian Police
  primary: '#00457C', // Police blue
  secondary: '#008F39', // Police green
  accent: '#F6B40E', // Colombian flag yellow
  light: '#FFFFFF',
  dark: '#002855',
  grey: '#E6E6E6',
  
  // Extended palette
  danger: '#D32F2F',
  warning: '#FF9800',
  success: '#4CAF50',
  info: '#2196F3',
  
  // Colombian flag colors
  flagYellow: '#FEE94E',
  flagBlue: '#003893',
  flagRed: '#CE1126',
  
  // Text colors
  textDark: '#11181C',
  textLight: '#FFFFFF',
  textSecondary: '#6C757D',
  
  // Background colors
  backgroundLight: '#FFFFFF',
  backgroundDark: '#F5F7FA',
  backgroundPrimary: '#E8F1F5',
};

// This type ensures type safety when using the colors
export type ColorName = keyof typeof Colors;
</file>

<file path="app.json">
{
  "expo": {
    "name": "SafeLife",
    "slug": "SafeLife",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/images/icon.png",
    "scheme": "myapp",
    "userInterfaceStyle": "automatic",
    "newArchEnabled": true,
    "ios": {
      "supportsTablet": true
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/images/adaptive-icon.png",
        "backgroundColor": "#ffffff"
      },
      "package": "com.devsociety.savelife"
    },
    "web": {
      "bundler": "metro",
      "output": "static",
      "favicon": "./assets/images/favicon.png"
    },
    "plugins": [
      "expo-router",
      [
        "expo-splash-screen",
        {
          "image": "./assets/images/splash-icon.png",
          "imageWidth": 200,
          "resizeMode": "contain",
          "backgroundColor": "#ffffff"
        }
      ]
    ],
    "experiments": {
      "typedRoutes": true
    },
    "extra": {
      "router": {
        "origin": false
      },
      "eas": {
        "projectId": "3b922c31-20c9-4208-897e-253344b258e9"
      }
    }
  }
}
</file>

<file path="README.md">
# Aplicación SaveLife

Una aplicación móvil desarrollada con React Native y Expo, enfocada en combatir la extorsión dirigida al sector comercial en la localidad de Kennedy, Bogotá, específicamente en la jurisdicción del CAI Caldas. La aplicación refleja la identidad corporativa de la Policía Nacional de Colombia.

## Características

- **Identificación de Llamadas Sospechosas**: Alerta cuando una llamada entrante coincide con números reportados como utilizados para extorsión.
- **Bloqueo de Llamadas**: Función de bloqueo automático de llamadas sospechosas.
- **Registro y Reporte de Incidentes**: Formulario para que los usuarios puedan ingresar detalles sobre intentos de extorsión.
- **Grabación de Llamadas**: Interfaz para iniciar/detener la grabación de llamadas.
- **Información y Recursos de Prevención**: Sección con información sobre cómo identificar, prevenir y reaccionar ante la extorsión.
- **Alertas y Notificaciones**: Alertas sobre nuevas modalidades de extorsión o números reportados en la zona.
- **Coordinación Comunitaria**: Interfaz para que comerciantes verificados puedan compartir información sobre incidentes.
- **Integración con Líneas de Emergencia**: Botones para llamar a los números de emergencia de la policía y otras autoridades.

## Tecnologías

- React Native
- Expo
- TypeScript
- React Navigation

## Capturas de Pantalla

(Próximamente)

## Instalación

1. Clone este repositorio:
   ```
   git clone https://github.com/tuusuario/aplicacion-SafeLife.git
   ```

2. Ingrese al directorio del proyecto:
   ```
   cd aplicacion-SafeLife
   ```

3. Instale las dependencias:
   ```
   npm install
   ```

4. Inicie la aplicación:
   ```
   npx expo start
   ```

## Notas Importantes

- Esta aplicación se desarrolló como parte de una iniciativa para mejorar la seguridad de los comerciantes en la localidad de Kennedy, Bogotá.
- Se recomienda su uso en conjunto con las orientaciones de la Policía Nacional de Colombia.
- La función de grabación de llamadas debe ser utilizada de acuerdo con la legislación vigente y con el consentimiento de todas las partes involucradas en la conversación.

## Colaboradores

- Policía Nacional de Colombia
- App - SaveLife
- Desarrollado por DevSociety

## Licencia

Este proyecto está bajo la Licencia [Especificar tipo de licencia]
</file>

</files>
